using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using AutoMapper;
using WebApiKor.InfraWeb;
using WebApiKor.Models;
using System.Text;
using System.IO;
using System.IO.Compression;
using System.Drawing;
using System.Drawing.Imaging;
using System.Web;

namespace WebApiKor.Controllers
{
    [Authorize(Roles = "Administrador, Operador")]
    [RoutePrefix("api/mensagem")]
    public class MensagemController : ApiController
    {

        ModeloBancoEntities db = new ModeloBancoEntities();

        [HttpGet]
        [Route("listamensagem")]
        public HttpResponseMessage GetQtdMensagens(HttpRequestMessage request, string filter = null)
        {
            var idUsuario = 0;

            HttpResponseMessage response = null;

            //Pegar o usuário logado para trazer somente as mensagens enviadas por ele ou recebidas pelo mesmo.
            var usuarios = db.usuario.Where(user => user.email == User.Identity.Name).Select(user => user.usuario_id);

            foreach (var usuario in usuarios)
            {
                idUsuario = usuario;
            }

            List<mensagem> mensagens = db.mensagem.Where(usu => usu.usuario_destino_id == idUsuario && usu.visualizado == 0).ToList();

            var quantidadeMensagens = mensagens.Count;

            response = request.CreateResponse(HttpStatusCode.OK, quantidadeMensagens);


            return response;
        }

        [AllowAnonymous]
        [HttpGet]
        [Route("listamensagens/{IdUsuarioConversa}/{IdUsuario}")]
        public HttpResponseMessage ListarMensagens(HttpRequestMessage request, int IdUsuarioConversa, int idUsuario, string filter = null)
        {
            HttpResponseMessage response = null;
            //Pegar o usuário logado para trazer somente as mensagens enviadas por ele ou recebidas pelo mesmo.

            List<mensagem> mensagens = db.mensagem.Where(usu => (usu.usuario_destino_id == IdUsuarioConversa && usu.usuario_id == idUsuario) || (usu.usuario_destino_id == idUsuario && usu.usuario_id == IdUsuarioConversa)).ToList();

            var quantidadeMensagens = mensagens.Count;


            List<MensagemViewModel> mensagemViewModel = Mapper.Map<List<mensagem>, List<MensagemViewModel>>(mensagens);

            response = request.CreateResponse(HttpStatusCode.OK, mensagemViewModel);


            return response;
        }

        [HttpGet]
        [Route("listausuarios")]
        public HttpResponseMessage GetUsuarioDestinatario(HttpRequestMessage request)
        {
            HttpResponseMessage response = null;


            //Pegar o usuário logado e trazer somente os usuários que sejam diferentes dele mesmo.
            var email = User.Identity.Name;

            List<usuario> usuarios = db.usuario.Where(usu => usu.email != email.Trim() && usu.ativo == 1).OrderBy(usu => usu.nome).ToList();


            int totalUsuarios = db.usuario.Count();


            IEnumerable<UsuarioViewModel> usuariosVM = Mapper.Map<IEnumerable<usuario>, IEnumerable<UsuarioViewModel>>(usuarios);

            PaginacaoConfig<UsuarioViewModel> pagSet = new PaginacaoConfig<UsuarioViewModel>()
            {
                Items = usuariosVM
            };


            response = request.CreateResponse(HttpStatusCode.OK, pagSet);


            return response;
        }

        [AllowAnonymous]
        [HttpGet]
        [Route("listaconversas/{idUsuario}")]
        public HttpResponseMessage ListarConversas(HttpRequestMessage request, int idUsuario)
        {
            HttpResponseMessage response = null;

            var mensagens = db.Listar_Conversas_Mensagens(idUsuario).ToList();
            response = request.CreateResponse(HttpStatusCode.OK, mensagens);


            return response;
        }

        [AllowAnonymous]
        [HttpPost]
        [Route("inserirmensagem")]
        public HttpResponseMessage InserirMensagem(HttpRequestMessage request, MensagemViewModel mensagemViewModel)
        {

            HttpResponseMessage response = null;

            if (!ModelState.IsValid)
            {
                response = request.CreateResponse(HttpStatusCode.BadRequest,
                    ModelState.Keys.SelectMany(k => ModelState[k].Errors)
                          .Select(m => m.ErrorMessage).ToArray());
            }
            else
            {

                //Pegar usuário logado para adicionar no campo de remetente.
                /*var emailUsuario = User.Identity.Name;

                var usuarios = db.usuario.Where(usu => usu.email == emailUsuario);


                foreach (var usuario in usuarios)
                {
                    mensagemViewModel.IdUsuario = usuario.usuario_id;
                }*/


                //Atualiza o model para pode inserir no banco de dados 
                mensagem novaMensagem = new mensagem()
                {
                    usuario_id = mensagemViewModel.IdUsuario,
                    usuario_destino_id = mensagemViewModel.UsuarioDestino,
                    texto = mensagemViewModel.TextoMensagem,
                    visualizado = 0,
                    baixado = 0,
                    datacriado = DateTime.Now

                };

                db.mensagem.Add(novaMensagem);
                db.SaveChanges();

                // Update view model
                mensagemViewModel = Mapper.Map<mensagem, MensagemViewModel>(novaMensagem);


                response = request.CreateResponse(HttpStatusCode.Created, mensagemViewModel);
            }

            return response;
        }

        [AllowAnonymous]
        [HttpPost]
        [Route("inseriranexo")]
        public HttpResponseMessage InserirAnexo(HttpRequestMessage request, AnexoViewModel anexoViewModel)
        {

            HttpResponseMessage response = null;

            if (!ModelState.IsValid)
            {
                response = request.CreateResponse(HttpStatusCode.BadRequest,
                    ModelState.Keys.SelectMany(k => ModelState[k].Errors)
                          .Select(m => m.ErrorMessage).ToArray());
            }
            else
            {
                //Atualiza o model para pode inserir no banco de dados 
                anexo novoAnexo = new anexo()
                {
                    nome = anexoViewModel.nomeArq,
                    datacriado = DateTime.Now,
                    ativo = 1,
                    usuario_id = anexoViewModel.usuario_id,
                    desc_anexo = anexoViewModel.nome
                };

                db.anexo.Add(novoAnexo);
                db.SaveChanges();

                salvarImg(anexoViewModel.base64, anexoViewModel.nomeArq);

                response = request.CreateResponse(HttpStatusCode.Created, novoAnexo);
            }

            return response;
        }

        [AllowAnonymous]
        [HttpPost]
        [Route("inseriranexomensagem")]
        public HttpResponseMessage InserirAnexoMensagem(HttpRequestMessage request, AnexoMensagemViewModel anexoMensagemViewModel)
        {
            HttpResponseMessage response = null;

            if (!ModelState.IsValid)
            {
                response = request.CreateResponse(HttpStatusCode.BadRequest,
                    ModelState.Keys.SelectMany(k => ModelState[k].Errors)
                          .Select(m => m.ErrorMessage).ToArray());
            }
            else
            {
                //Atualiza o model para pode inserir no banco de dados 
                anexo_mensagem anxMsg = new anexo_mensagem()
                {
                    id_anexo = anexoMensagemViewModel.id_anexo,
                    mensagem_id = anexoMensagemViewModel.IdMensagem
                };

                db.anexo_mensagem.Add(anxMsg);
                db.SaveChanges();

                response = request.CreateResponse(HttpStatusCode.Created, anxMsg);
            }

            return response;
        }

        [AllowAnonymous]
        [HttpGet]
        [Route("getanexos/{IdMensagem}")]
        public HttpResponseMessage GetAnexosImagens(HttpRequestMessage request, int IdMensagem)
        {
            HttpResponseMessage response = null;

            //Abre o diretorio de anexos e atribui ao array Files
            DirectoryInfo Dir = new DirectoryInfo(HttpContext.Current.Server.MapPath("~\\Gallery\\Anexos"));
            List<anexo> Anexos = new List<anexo>();

            List<int?> AnexosId = db.anexo_mensagem.Where(a => a.mensagem_id == IdMensagem).Select(a => a.id_anexo).ToList();

            foreach (int id in AnexosId)
                Anexos.Add(db.anexo.Where(a => a.id_anexo == id).FirstOrDefault());

            //http:///localhost:62272/Gallery
            response = request.CreateResponse(HttpStatusCode.Created, Anexos);

            return response;
        }

        public void salvarImg(String base64, String nomeArq)
        {
            byte[] bytes = Convert.FromBase64String(base64);

            Image image;
            using (MemoryStream ms = new MemoryStream(bytes))
            {
                image = Image.FromStream(ms);
                string path = HttpContext.Current.Server.MapPath("~\\Gallery\\Anexos\\");
                image.Save(path + nomeArq);
            }
        }

        [HttpGet]
        [Route("listamensagemrecebidas")]
        public HttpResponseMessage GetMensagemRecebidas(HttpRequestMessage request, string filter = null)
        {
            var idUsuario = 0;

            HttpResponseMessage response = null;


            //Pegar o usuário logado para trazer somente as mensagens enviadas por ele ou recebidas pelo mesmo.
            var usuarios = db.usuario.Where(user => user.email == User.Identity.Name).Select(user => user.usuario_id);

            foreach (var usuario in usuarios)
            {
                idUsuario = usuario;
            }

            List<mensagem> mensagens = db.mensagem.Where(usu => usu.usuario_destino_id == idUsuario || usu.usuario_id == idUsuario).OrderByDescending(mens => mens.datacriado).ToList();

            for (int i = 0; i < mensagens.Count - 1; i++)
                mensagens[i].texto = mensagens[i].texto;

            IEnumerable<MensagemViewModel> mensagensVM = Mapper.Map<IEnumerable<mensagem>, IEnumerable<MensagemViewModel>>(mensagens);

            PaginacaoConfig<MensagemViewModel> pagSet = new PaginacaoConfig<MensagemViewModel>()
            {
                IdUsuarioLogado = idUsuario,
                Items = mensagensVM
            };


            response = request.CreateResponse(HttpStatusCode.OK, pagSet);


            return response;
        }


        [AllowAnonymous]
        [HttpPost]
        [Route("atualizastatusmensagens/{IdUsuarioConversa}/{IdUsuario}")]
        public HttpResponseMessage AtualizaMensagensLidas(HttpRequestMessage request, int IdUsuarioConversa, int idUsuario, MensagemViewModel mensagemViewModel)
        {
            HttpResponseMessage response = null;

            if (!ModelState.IsValid)
            {
                response = request.CreateResponse(HttpStatusCode.BadRequest,
                    ModelState.Keys.SelectMany(k => ModelState[k].Errors)
                          .Select(m => m.ErrorMessage).ToArray());
            }
            else
            {
                var mensagens = db.mensagem.Where(m => ((m.usuario_destino_id == IdUsuarioConversa && m.usuario_id == idUsuario) 
                                                 || (m.usuario_destino_id == idUsuario && m.usuario_id == IdUsuarioConversa))
                                                 && m.visualizado == 0).ToList();

                mensagens.ForEach(m => m.visualizado = 1);
                db.SaveChanges();

                response = request.CreateResponse(HttpStatusCode.OK);
            }

            return response;
        }

        public static string Compacta(string text)
        {
            byte[] buffer = Encoding.UTF8.GetBytes(text);
            MemoryStream ms = new MemoryStream();
            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, true))
            {
                zip.Write(buffer, 0, buffer.Length);
            }

            ms.Position = 0;
            MemoryStream outStream = new MemoryStream();

            byte[] compressed = new byte[ms.Length];
            ms.Read(compressed, 0, compressed.Length);

            byte[] gzBuffer = new byte[compressed.Length + 4];
            Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length);
            Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);
            return Convert.ToBase64String(gzBuffer);
        }

        public static string Descompacta(string compressedText)
        {
            byte[] gzBuffer = Convert.FromBase64String(compressedText);
            using (MemoryStream ms = new MemoryStream())
            {
                int msgLength = BitConverter.ToInt32(gzBuffer, 0);
                ms.Write(gzBuffer, 4, gzBuffer.Length - 4);

                byte[] buffer = new byte[msgLength];

                ms.Position = 0;
                using (GZipStream zip = new GZipStream(ms, CompressionMode.Decompress))
                {
                    zip.Read(buffer, 0, buffer.Length);
                }
                return Encoding.UTF8.GetString(buffer);
            }
        }

    }
}
